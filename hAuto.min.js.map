{"version":3,"file":"hAuto.min.js","sources":["hAuto.js"],"names":["angular","window","Error","inputClass","spinnerClass","itemsClass","itemClass","formatter","item","assignOpts","$scope","attrs","key","defaultValue","keyBoardHandler","e","keyCode","moveUp","$apply","moveDown","selectItem","$curIndex","preventDefault","disablePointerHandler","hAuto","module","hAutoDir","$filter","$timeout","restrict","scope","displayFormatter","displayField","value","initItems","itemSelect","lazyLoad","link","element","promise","winEl","binded","loading","handler","reset","list","bindHandler","on","unbindHandler","off","getSpecifiedDiv","cssName","el","children","i","length","hasClass","filtering","items","searchTxt","inputEl","find","css","position","width","prop","lazyDataHandler","data","index","$event","stopPropagation","selected","$watch","newValue","cancel","$on","template","directive"],"mappings":"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","sourcesContent":["/**\n * ******************************************************************************************************\n *\n *  angular based directive for auto-complete stuff\n *\n *  @author  Howard.Zuo\n *  @date    Aug 13th, 2014\n *\n * ******************************************************************************************************\n */\n(function(angular, window) {\n    'use strict';\n\n    if (typeof angular === 'undefined') {\n        throw new Error('hAuto requires angular');\n    }\n\n    //default classes for directive\n    var inputClass = 'form-control';\n    var spinnerClass = 'fa fa-spinner fa-spin fa-lg';\n    var itemsClass = 'list-group';\n    var itemClass = 'list-group-item';\n\n    //default formatter used for display object item\n    var formatter = function(item) {\n        return item;\n    };\n\n    var assignOpts = function($scope, attrs, key, defaultValue) {\n        if (!attrs[key]) {\n            $scope[key] = defaultValue;\n        } else {\n            $scope[key] = attrs[key];\n        }\n    };\n\n\n    var keyBoardHandler = function($scope) {\n        return function(e) {\n            switch (e.keyCode) {\n                case 38:\n                    $scope.moveUp();\n                    $scope.$apply();\n                    break;\n                case 40:\n                    $scope.moveDown();\n                    $scope.$apply();\n                    break;\n                case 13:\n                    $scope.selectItem($scope.$curIndex);\n                    $scope.$apply();\n                    break;\n            }\n            e.preventDefault();\n            return;\n        };\n    };\n\n    var disablePointerHandler = function(e) {\n        switch (e.keyCode) {\n            case 38:\n            case 40:\n                e.preventDefault();\n                return;\n        }\n    };\n\n    var hAuto = angular.module('hAuto', []);\n\n\n    var hAutoDir = function($filter, $timeout) {\n        return {\n            restrict: 'AE',\n            scope: {\n                'displayFormatter': '&',\n                'displayField': '@',\n                'value': '=',\n                'initItems': '=',\n                'itemSelect': '&',\n                'lazyLoad': '&'\n            },\n            link: function($scope, element, attrs) {\n                var winEl = angular.element(window);\n                var binded = false;\n                var promise;\n                //set loading with falsy since not need to display spinner at the begining\n                $scope.loading = false;\n                assignOpts($scope, attrs, 'inputClass', inputClass);\n                assignOpts($scope, attrs, 'spinnerClass', spinnerClass);\n                assignOpts($scope, attrs, 'itemsClass', itemsClass);\n                assignOpts($scope, attrs, 'itemClass', itemClass);\n                assignOpts($scope, attrs, 'inputAddonTxt', '');\n                if (attrs.displayFormatter) {\n                    $scope.formatter = $scope.displayFormatter();\n                } else {\n                    $scope.formatter = formatter;\n                }\n\n                var handler = keyBoardHandler($scope);\n\n                var reset = function() {\n                    $scope.$curIndex = -1;\n                    $scope.list = [];\n                };\n\n                var bindHandler = function() {\n                    if (!binded) {\n                        winEl.on('keyup', handler);\n                        winEl.on('keydown', disablePointerHandler);\n                        binded = true;\n                    }\n                };\n\n                var unbindHandler = function() {\n                    winEl.off('keyup', handler);\n                    winEl.off('keydown', disablePointerHandler);\n                    binded = false;\n                };\n\n                var getSpecifiedDiv = function(cssName) {\n                    var children = element.children();\n                    var el;\n                    for (var i = 0; i < children.length; i++) {\n                        el = angular.element(children[i]);\n                        if (el.hasClass(cssName)) {\n                            return el;\n                        }\n                    }\n                    return;\n                };\n\n                var filtering = function(items) {\n                    if (!$scope.searchTxt) {\n                        $scope.list = [];\n                    } else {\n                        $scope.list = $filter('filter')(items, $scope.searchTxt);\n                    }\n                    var inputEl = element.find('input');\n                    $timeout(function() {\n                        var el = getSpecifiedDiv($scope.itemsClass);\n                        if (el) {\n                            el.css({\n                                'position': 'absolute',\n                                'width': inputEl.prop('offsetWidth') + 'px'\n                            });\n                        }\n                    });\n\n                    bindHandler();\n                };\n\n                var lazyDataHandler = function(data) {\n                    filtering(data);\n                    $scope.loading = false;\n                    $scope.$apply();\n                };\n\n                reset();\n\n                $scope.moveUp = function() {\n                    if ($scope.$curIndex > 0) {\n                        $scope.$curIndex--;\n                    }\n                };\n\n                $scope.moveDown = function() {\n                    if (($scope.$curIndex + 1) < $scope.list.length) {\n                        $scope.$curIndex++;\n                    }\n                };\n\n                $scope.selectItem = function(index, $event) {\n                    if (index < 0) {\n                        if ($event) {\n                            $event.preventDefault();\n                            $event.stopPropagation();\n                        }\n                        return;\n                    }\n                    var item = $scope.list[index];\n                    if (attrs.itemSelect) {\n                        $scope.itemSelect({\n                            item: item,\n                            index: index\n                        });\n                    }\n                    $scope.value = item;\n                    $scope.searchTxt = $scope.displayField ? item[$scope.displayField] : $scope.formatter(item);\n                    $scope.selected = true;\n                    if ($event) {\n                        $event.preventDefault();\n                        $event.stopPropagation();\n                    }\n\n                };\n\n                $scope.$watch('searchTxt', function(newValue, oldValue) {\n                    if (!newValue || $scope.selected) {\n                        reset();\n                        unbindHandler();\n                        if ($scope.selected) {\n                            $scope.selected = false;\n                        }\n                        return;\n                    }\n\n                    if (attrs.lazyLoad) {\n                        if (promise) {\n                            $timeout.cancel([promise]);\n                        }\n                        reset();\n                        $scope.loading = true;\n                        $timeout(function() {\n                            var inputEl = element.find('input');\n                            getSpecifiedDiv('spinner-position').css({\n                                'position': 'absolute',\n                                'width': inputEl.prop('offsetWidth') + 'px'\n                            });\n                        });\n\n                        promise = $timeout(function() {\n                            $scope.lazyLoad({\n                                handler: lazyDataHandler,\n                                searchTxt: newValue\n                            });\n                        }, 1000);\n\n                        return;\n                    }\n\n                    filtering($scope.initItems);\n\n                });\n\n\n                $scope.$on('$destroy', function() {\n                    unbindHandler();\n                });\n\n            },\n            template: '<input type=\"text\" ng-class=\"inputClass\" ng-model=\"searchTxt\"/><div class=\"spinner-position\" ng-if=\"loading\"><i ng-class=\"spinnerClass\"></i></div><div ng-if=\"list.length !== 0\" ng-class=\"itemsClass\"><a ng-repeat=\"li in list\" href ng-click=\"selectItem($index, $event);\" class=\"{{itemClass}}\" ng-class=\"{active: $index === $curIndex}\">{{ displayField ? li[displayField] : formatter(li) }}</a></div>'\n        };\n    };\n\n    hAuto.directive('hAuto', ['$filter', '$timeout', hAutoDir]);\n\n}(angular, window));"],"sourceRoot":"/source/"}